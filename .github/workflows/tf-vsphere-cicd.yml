name: 'Terraform CI'

env:

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} 
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
  TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
  TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
  TF_VAR_repo_name: ${{ github.event.repository.name }}
  TF_VAR_vsphere_password: ${{ secrets.VSPHERE_PASSWORD }}
  TF_VAR_deployment_password: ${{ secrets.DEPLOYMENT_PASSWORD }}
  
on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:
  
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: [self-hosted, devops]
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner 
    - name: Checkout
      uses: actions/checkout@v3
    
    # https://github.com/actions/setup-node
    - uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: AWS CLI v2
      uses: aws-actions/configure-aws-credentials@v2
      with:
        args: s3 ls
        aws-region: eu-west-2
        
    - name: Copy files to the test website with the AWS CLI
      run: |
        aws s3  ls
    
    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
  #   # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Init
      run: >
        terraform init
        -backend-config="bucket=terrform-state-files"
        -backend-config="key=terraform/${{ github.event.repository.name }}/terraform.tfstate"
        -backend-config="region=eu-west-2"

     # Checks that all Terraform configuration files adhere to a canonical format
     - name: Terraform Format
       run: terraform fmt
      
    # Generates an execution plan for Terraform  
    - name: Terraform Plan
      run: terraform plan 
    
    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve 
